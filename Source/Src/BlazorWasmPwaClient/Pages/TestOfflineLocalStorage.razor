@page "/TestOffline"

@* @inject IAccessTokenProvider TokenProvider *@
@inject HttpClient HttpClient
@* @inject IJSRuntime JSRuntime *@
@* @inject NavigationManager Navigation *@
@* @inject AuthService AuthService *@
@* @inject AuthenticationStateProvider authenticationStateProvider *@

@inject IHttpClientFactory HttpClientFactory
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<p>@output</p>

<button @onclick="CallApiAndTest">Display Access Token </button>
<p style="width:auto">getAnonymousResult: @getAnonymousResult</p>
<p style="width:100%">getAuthenticatedResult:@getAuthenticatedResult</p>

<p style="width:auto">getAnonymousResult2: @getAnonymousResult2</p>
@* <p>result2 Authenticated:@result2</p> *@

<p>responsePostAnonymous : @responsePostAnonymous</p>
<p>responsePostAuthenticated : @responsePostAuthenticated</p>


<a href="/userinfo">User Info action link</a>


@code
{
    private string output;
    public IList<string> scopes;
    string getAuthenticatedResult = "";
    string getAnonymousResult = "";

    string getAuthenticatedResult2 = "";
    string getAnonymousResult2 = "";

    string responsePostAnonymous = "";
    string responsePostAuthenticated = "";
    private HttpClient _httpClientAuth;//not working
    private HttpClient _httpClientAnonymus;

    protected override async Task OnInitializedAsync()
        {
        await CallApiAndTest();
        }

    private async Task CallApiAndTest()
        {

        _httpClientAnonymus = HttpClientFactory.CreateClient(PublicCommon.CONSTANTS.ClientAnonymous);


        //  HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", null);
        //dont pass token here ,instead use interceptor to pass token securely
        getAnonymousResult = await localStorage.GetOrFetchAndSet<string>("TestAnonymousEndpoint", HttpClient);

        //  var responseAnon = await HttpClient.GetAsync("TestAnonymousEndpoint");
        //this will work only if program.cs contain   builder.Services.AddScoped(sp => new HttpClient { BaseAddress = apiUrl });



        //with client factory
        getAnonymousResult2 = await localStorage.GetOrFetchAndSet<string>("TestAnonymousEndpoint", _httpClientAnonymus);


        /* this works only if anuthenticated
        _httpClientAuth = HttpClientFactory.CreateClient(PublicCommon.CONSTANTS.ClientAuthorized );
        getAuthenticatedResult = await localStorage.GetOrFetchAndSet<string>("TestAuthenticatedEndpoint", _httpClientAuth);

        var t2 = await localStorage.GetOrFetchAndSet<string>("TestAuthenticatedEndpoint", _httpClientAuth);
        */

        string dataToSend = "This is some data";
        var content = new StringContent(JsonSerializer.Serialize(dataToSend), System.Text.Encoding.UTF8, "application/json");

        var request = new HttpRequestMessage(HttpMethod.Post, "TestAnonymousEndpoint")
                {
                Content = content
                // Content = new StringContent(JsonSerializer.Serialize(userdata), Encoding.UTF8, "application/json")
                };

        var responsePostAnon = await _httpClientAnonymus.SendAsync(request);
        if (responsePostAnon.IsSuccessStatusCode)
            {
            responsePostAnonymous = await responsePostAnon.Content.ReadAsStringAsync();
            responsePostAnonymous ??= "nothing";
            }
        else
            {
            responsePostAnonymous = responsePostAnon.StatusCode.ToString();
            }

        var requestAuth = new HttpRequestMessage(HttpMethod.Post, "TestAuthenticatedEndpoint")
                {
                Content = content
                // Content = new StringContent(JsonSerializer.Serialize(userdata), Encoding.UTF8, "application/json")
                };
        /* this works only if anuthenticated
                var responsePostAuth = await _httpClientAuth.SendAsync(requestAuth);
        if (responsePostAuth.IsSuccessStatusCode)
            {
            responsePostAuthenticated = await responsePostAuth.Content.ReadAsStringAsync();
            responsePostAuthenticated ??= "nothing";
            }
        else
            {
            responsePostAuthenticated = responsePostAuth.StatusCode.ToString();
            }
            */

        //clientfactory
        //this is not working with authentication had to fix
        // HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:5001/api/TestAuthenticatedEndpoint");

        // var response2Auth = await _httpClientAuth.SendAsync(request);
        // if (response2Auth.IsSuccessStatusCode)
        //     {
        //     result2 = await response2Auth.Content.ReadAsStringAsync();
        //     result2 ??= "nothing";
        //     }
        // else
        //     {
        //     result2 = response2Auth.StatusCode.ToString();
        //     }
        }
}

