@using Microsoft.Extensions.Localization
@using MyTown.RCL.Town
@using MyTown.RCL.CardType
@using MyTown.SharedModels.Features.Cards.Commands
@using SharedResponse
@inject IStringLocalizer<TownCardDto> L
@inject CardService cardService

@inject CardTypeService cardTypeService
@inject TownService townService

@inject AuthService authService
@inject ClientConfig clientConfig
@inherits MudComponentBase
@* @inject ITranslator translator *@
<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(_modelValidator.Validate(model))">
            @*  <MudGrid> *@
            @*TODO: define mudform that should be edit fields, for example:*@
            @if (model.Id > 0)
                {
                <small>@model.Id</small>
                }
            <MudTextField Label="@L[model.GetMemberDescription(x => x.Name)]" @bind-Value="model.Name" For="@(() => model.Name)" Required="true" RequiredError="@L["Name is required!"]" tabindex="1" />
            @*    <MudTextField Label="@L[model.GetMemberDescription(x => x.ShortName)]" @bind-Value="model.ShortName" For="@(() => model.ShortName)" Required="true" RequiredError="@L["ShortName is required!"]"></MudTextField> *@
            <MudTextField Label="@L[model.GetMemberDescription(x => x.Description)]" Lines="1" For="@(() => model.Description)" @bind-Value="model.Description" tabindex="2" />


            @*   <MudTextField Label="@L[model.GetMemberDescription(x => x.Price)]" @bind-Value="model.Price" For="@(() => model.Price)" Required="true" RequiredError="@L["Price is required!"]"></MudTextField>
            <MudTextField Label="@L[model.GetMemberDescription(x => x.PriorityOrder)]" For="@(() => model.PriorityOrder)" @bind-Value="model.PriorityOrder"></MudTextField> *@

            @*  </MudGrid> *@
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@Cancel" tabindex="11">@ConstantString.Cancel</MudButton>
        <MudButton Loading="@_saving" OnClick="Submit" tabindex="10" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Color="Color.Tertiary">@ConstantString.Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    //here only image upload, all logic happens
    //so security is most important
    [EditorRequired]
    [Parameter]
    public CreateUpdateTownCardCommand model { get; set; } = null!;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    MudForm? _form;
    private bool _saving;

    CreateUpdateTownCardCommandValidator _modelValidator = new CreateUpdateTownCardCommandValidator();//translator

    List<TownCardTypeDto> cardTypes = [];
    List<TownDto> towns = [];

    protected override async Task OnInitializedAsync()
        {
        //before this show dialog as
        /*
        Create Card, on click it doesnt need login,
        instead show a dialog of some 5 points

       UpdateCard,
       For draft show dialog as it needs approval,tiill then its not visible kind of message
       For approved,drafts are draft only,untill approval it will not be visible
       exclept phone number,email id
        */
        //fetch town name & cardtypes ddl items

        var townsResult = await townService.GetAllTownsAsync();
        if (townsResult.HasData()) towns = townsResult;

        var cardTypesResult = await cardTypeService.GetAllTownCardTypesAsync();
        if (cardTypesResult.HasData()) cardTypes = cardTypesResult;
        //return base.OnInitializedAsync();
        }

    async Task Submit()
        {
        await authService.LoginUserMakingSure();
        try
            {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;

            var res = await cardService.CreateUpdateTownCardAsync(model);

            if (res != null && res.Success)
                {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                }
            else
                {
                Snackbar.Add(res == null || res.Errors == null ? "UnKnown Error" : res.Errors.FirstOrDefault().Description, Severity.Error);
                }
            }
        finally
            {
            _saving = false;
            }
        }

    void Cancel()
        {
        MudDialog.Cancel();
        }

}