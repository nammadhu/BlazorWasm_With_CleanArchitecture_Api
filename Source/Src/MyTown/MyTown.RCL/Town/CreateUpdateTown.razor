@using Microsoft.Extensions.Localization
@using MyTown.SharedModels.Features.Towns.Commands
@using SharedResponse
@inject IStringLocalizer<TownDto> L
@inject TownService townService
@inject AuthService authService
@inject ClientConfig clientConfig
@inherits MudComponentBase
@* @inject ITranslator translator *@
<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(_modelValidator.Validate(model))">
            @*  <MudGrid> *@
            @*TODO: define mudform that should be edit fields, for example:*@
            @if (model.Id > 0)
                {
                <MudText>@model.Id</MudText>
                }
            <MudTextField Label="@L[model.GetMemberDescription(x => x.Name)]" @bind-Value="model.Name" For="@(() => model.Name)" Required="true" RequiredError="@L["Name is required!"]" tabindex="1" />
            <MudTextField Label="@L[model.GetMemberDescription(x => x.SubTitle)]" @bind-Value="model.SubTitle" For="@(() => model.SubTitle)" tabindex="2" />
            <MudTextField Label="@L[model.GetMemberDescription(x => x.Description)]" Lines="1" For="@(() => model.Description)" @bind-Value="model.Description" tabindex="3" />
            <MudTextField Label="@L[model.GetMemberDescription(x => x.State)]" @bind-Value="model.State" For="@(() => model.State)" tabindex="4" />
            @* <MudTextField Label="@L[model.GetMemberDescription(x => x.Price)]" @bind-Value="model.Price" For="@(() => model.Price)" Required="true" RequiredError="@L["Price is required!"]"></MudTextField>
            <MudTextField Label="@L[model.GetMemberDescription(x => x.PriorityOrder)]" For="@(() => model.PriorityOrder)" @bind-Value="model.PriorityOrder"></MudTextField>
            *@
            @*  </MudGrid> *@
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@Cancel" tabindex="11">@ConstantString.Cancel</MudButton>
        <MudButton Loading="@_saving" OnClick="Submit" tabindex="10" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Color="Color.Tertiary">@ConstantString.Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [EditorRequired]
    [Parameter]
    public CreateUpdateTownCommand model { get; set; } = null!;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    MudForm? _form;
    private bool _saving;

    CreateUpdateTownCommandValidator _modelValidator = new CreateUpdateTownCommandValidator();//translator


    async Task Submit()
        {
        await authService.LoginUserMakingSure();
        if (clientConfig.IsAdmin == false) return;//as not admin
                                                  //also admin
        try
            {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;

            var res = await townService.CreateUpdateTownAsync(model);

            if (res != null && res.Success)
                {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                }
            else
                {
                Snackbar.Add(res == null || res.Errors == null ? "UnKnown Error" : res.Errors.FirstOrDefault().ErrorCode.ToString(), Severity.Error);
                }
            }
        finally
            {
            _saving = false;
            }
        }

    void Cancel()
        {
        MudDialog.Cancel();
        }

}